import numpy as np
import numpy.matlib as nummat

#function [T,Trb] = trans_mat_prbm(var,nrb,gamma,l,q,p)
def trans_mat_prbm(var,nrb,gamma,l,q,p):
    ##retruns rotation matrix from frame q to p
    T=np.eye(4);
    Trb = np.zeros((nrb*(q-p),4,4)); # trnasformation matrix from i-1 disk to Pj
    for iteration in range(p,q):
        theta = var[0][((nrb+1)*(iteration+1)-nrb-1):(nrb+1)*(iteration+1)-nrb+2];
        phi = var[0][((nrb+1)*(iteration+1)-nrb+2)];
        epsi = var[0][((nrb+1)*(iteration+1)-nrb+3)];
        
            
        R_phi = np.array([np.cos(phi),-1*np.sin(phi),0,0,
                              np.sin(phi),np.cos(phi),0,0,
                              0,0,1,0,
                              0,0,0,1]).reshape(4,4);
            
        R_phi_epsi = np.array([np.cos(epsi-phi),-1*np.sin(epsi-phi),0,0,
                          np.sin(epsi-phi),np.cos(epsi-phi),0,0
                          ,0,0,1,0,
                          0,0,0,1]).reshape(4,4);
            
        gamma_fun = np.array([1,0,0,0,0,1,0,0,0,0,1,gamma[0][0]*l[0][iteration],0,0,0,1]).reshape(4,4);
        Ti = np.matmul(R_phi,gamma_fun);
        
        Trb[nrb*((iteration+1)-(p+1)),:,:] = np.matmul(T,Ti);
        for k in range(0,nrb-1):
            temp = np.array([np.cos(theta[k]),0,np.sin(theta[k]),
                          gamma[0][k+1]*l[0][iteration]*np.sin(theta[k]),
                          0,1,0,0,
                          -1*np.sin(theta[k]),
                          0,np.cos(theta[k]),gamma[0][k+1]*l[0][iteration]*np.cos(theta[k]),
                          0, 0, 0, 1]).reshape(4,4);
            Ti = np.matmul(Ti,temp);
            #print(theta[k])
            #print("---------------------------")
            Trb[nrb*((iteration+1)-(p+1))+k+1,:,:] = np.matmul(T,Ti);
        #if q == 0 and p == 0:
            #T = np.eye(4);
        #else:
        T_temp = np.matmul(T,Ti);
        T = np.matmul(T_temp,R_phi_epsi)
    return T,Trb

# var = np.array([0.0105417598693131,0.0121603227538939,0.0116214071862558,1.04158477129316,-4.83598401868461e-06,0.0105421017894638,0.0121607050204100,
#                 0.0116217594464053,1.04158420085098,-4.75369129080432e-06,0.0105424131207064,0.0121610514801541,0.0116220769465554,1.04158368619783,
#                 -4.67104472838940e-06,0.0105426925886184,0.0121613606616038,0.0116223582778634,1.04158339770794,-4.58802037146761e-06,0.0105429389191032,
#                 0.0121616311251552,0.0116226020728548,1.04158308572932,-4.50489760378839e-06,0.0105431508938369,0.0121618614621992,0.0116228070290535,1.04158287502547,
#                 -4.42167521987068e-06,0.0105433272962604,0.0121620503276319,0.0116229718646230,1.04158274353357,-4.33847577294105e-06,0.0105434670245413,0.0121621964339442,
#                 1.16230953677100e-02,1.04158276678264,-4.25532950116744e-06,0.0105435689666463,0.0121622985135111,0.0116231763456727	,1.04158278592974,-4.17245091939105e-06,	
#                 0.0105436320775236,0.0121623553918398,0.0116232136976177,1.04158294398416,-4.08983426117043e-06,0.00605785805917550,0.00695080537293626,0.00667531021202574	,
#                 -0.520598505780961,7.43407235423819e-07,0.00605785723727266,0.00695080463668699,0.00667530971175595,-0.520598420381649,7.43425071128521e-07,0.00605785691069894,
#                 0.00695080444553693,0.00667530971390767,-0.520598474421382,7.43408523101083e-07,0.00605785702026354,0.00695080472980257,0.00667531014776450,-0.520598475868828,
#                 7.43406065101229e-07,0.00605785750258890,0.00695080541815526,0.00667531094360022,-0.520598418927649,7.43418486814337e-07,0.00605785830514973,0.00695080644954773,
#                 0.00667531204389696,-0.520598379283534,7.43425400806869e-07,0.00605785936599192,0.00695080775527279,0.00667531338286140,-0.520598391899133,7.43420641779802e-07,
#                 0.00605786062813146,0.00695080926724720,0.00667531489321344,-0.520598386953798,7.43420655937881e-07,0.00605786202816437,0.00695081091415130,0.00667531650946320,-0.520598347010033,
#                 3430189673226e-07,0.00605786351130354,0.00695081263213587,0.00667531816841580,-0.520598353589528,7.43428171336160e-07]).reshape(1,100);

# nrb = 4
# gamma = np.array([[0.12512513, 0.35035035, 0.38838839, 0.13613614]])
# l = np.array([[0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,
#         0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02]]).reshape(1,20)
# q = 20
# p = 0 
# T,Trb = trans_mat_prbm(var,nrb,gamma,l,q,p) 